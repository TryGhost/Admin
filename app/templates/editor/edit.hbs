<section class="gh-view">

    <header class="gh-editor-header">
        <div class="gh-editor-status">
        {{#if model.isPublished}}
            Published
        {{else if model.isScheduled}}
            Scheduled
        {{else}}
            Draft
        {{/if}}

        </div>
        <section class="view-actions">
            {{gh-editor-save-button
                isPublished=model.isPublished
                isScheduled=model.isScheduled
                willPublish=willPublish
                willSchedule=willSchedule
                statusFreeze=statusFreeze
                scheduledWillPublish=scheduledWillPublish
                timeScheduled=model.timeScheduled
                postOrPage=postOrPage
                isNew=model.isNew
                save="save"
                setSaveType="setSaveType"
                delete="toggleDeletePostModal"
                submitting=submitting
            }}
            <button type="button" class="post-settings" title="Settings" {{action "openSettingsMenu"}}>
                {{inline-svg "settings"}}
            </button>
        </section>
    </header>
    <div class="gh-editor-container needsclick">
        <div class="gh-editor-inner">
            {{gh-editor-title
                val=(readonly model.titleScratch)
                onChange=(action (mut model.titleScratch))
                tabindex="1"
                shouldFocus=shouldFocusTitle
                focus-out="updateTitle"
                update=(action (perform updateTitle))
                id="gh-editor-title"
                koenigEditor=(readonly editor)
            }}
            {{#if scheduleCountdown}}
                <time datetime="{{post.publishedAtUTC}}" class="gh-notification gh-notification-schedule">
                    Post will be published {{scheduleCountdown}}.
                </time>
            {{/if}}
            {{gh-koenig
                value=(readonly model.scratch)
                onChange=(action (mut model.scratch))
                onFirstChange=(action "autoSaveNew")
                onTeardown=(action "cancelTimers")
                shouldFocusEditor=shouldFocusEditor
                apiRoot=apiRoot
                assetPath=assetPath
                tabindex="2"
		        containerSelector=".gh-editor-container"
                setEditor=(action "setEditor")
            }}
        </div>
    </div>
</section>

{{#if showDeletePostModal}}
    {{gh-fullscreen-modal "delete-post"
        model=(hash post=model onSuccess=(route-action 'redirectToContentScreen'))
        close=(action "toggleDeletePostModal")
        modifier="action wide"}}
{{/if}}

{{#if showLeaveEditorModal}}
    {{gh-fullscreen-modal "leave-editor"
        confirm=(action "leaveEditor")
        close=(action "toggleLeaveEditorModal")
        modifier="action wide"}}
{{/if}}

{{#if showReAuthenticateModal}}
    {{gh-fullscreen-modal "re-authenticate"
        close=(action "toggleReAuthenticateModal")
        modifier="action wide"}}
{{/if}}

{{#liquid-wormhole}}
    {{gh-post-settings-menu
        model=model
        showSettingsMenu=application.showSettingsMenu
        closeNavMenu=(action "closeNavMenu")
        closeMenus=(action "closeMenus")
    }}
{{/liquid-wormhole}}
